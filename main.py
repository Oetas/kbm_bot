from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from db import add_event, get_events, update_birthday, update_notify_status, create_or_get_user, get_today_birthdays
from utils.logger import log_user_action
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import psycopg2
import os
import datetime
from dotenv import load_dotenv

DB_PARAMS = {
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST"),
    "port": os.getenv("DB_PORT"),
}

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

ADMIN_IDS = [552167621, 747868890, 678405392, 552167624, 552167625]

scheduler = AsyncIOScheduler()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    username = user.username or ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    create_or_get_user(update.effective_user)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, "/start")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ö–ë–ú –ë–æ—Ç. –í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/add_event <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
                                    "/events ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                                    "/birthday <–¥–¥.–º–º.–≥–≥–≥–≥> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                                    "/notify on|off ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def add_event_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return

    text = ' '.join(context.args)
    if not text:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_event <—Ç–µ–∫—Å—Ç>")
        return

    add_event(text)
    await update.message.reply_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

async def events_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events = get_events()
    if not events:
        await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
    else:
        await update.message.reply_text("\n\n".join(events))

async def birthday_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /birthday –¥–¥.–º–º.–≥–≥–≥–≥")
        return

    input_date = context.args[0]
    try:
        date_obj = datetime.datetime.strptime(input_date, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –¥–¥.–º–º.–≥–≥–≥–≥")
        return

    user_id = update.effective_user.id
    update_birthday(user_id, date_obj)
    await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {input_date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

async def check_birthdays():
    bot = Bot(token=TOKEN)
    users = get_today_birthdays()
    if not users:
        return

    names = ", ".join([u.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" for u in users])
    message = f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É: {names}!\n–î—Ä—É–∂–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ü•≥"
    await bot.send_message(chat_id=GROUP_CHAT_ID, text=message)

    for user in users:
        if user.notify:
            try:
                await bot.send_message(chat_id=user.tg_id,
                                       text=f"–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å! üéÇ –° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, {user.first_name}!")
            except:
                pass

async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or context.args[0].lower() not in ["on", "off"]:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /notify on –∏–ª–∏ /notify off")
        return

    value = context.args[0].lower() == "on"
    user_id = update.effective_user.id
    update_notify_status(user_id, value)
    await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã." if value else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")

async def on_startup(app):
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 16:52
    scheduler.add_job(check_birthdays, "cron", hour=17, minute=15)
    scheduler.start()


from telegram.ext import MessageHandler, filters

# === –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def forward_from_thread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text is None:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = update.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–∞—è —Ç–µ–º–∞
    if message.chat.id != int(os.getenv("GROUP_CHAT_ID")):
        return
    if message.message_thread_id != 260795:  #
        return
    if not message.text:
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = psycopg2.connect(**DB_PARAMS)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    cursor.execute("SELECT user_id FROM users WHERE subscribed_to_events = TRUE")
    users = cursor.fetchall()

    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for (user_id,) in users:
        try:
            await context.bot.send_message(chat_id=user_id, text=message.text)

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            cursor.execute(
                "INSERT INTO logs (user_id, action, timestamp) VALUES (%s, %s, %s)",
                (user_id, 'event_forward', datetime.now())
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    conn.commit()
    cursor.close()
    conn.close()


async def broadcast_to_subscribed_users(bot: Bot, message_text: str):
    conn = psycopg2.connect(**DB_PARAMS)
    cur = conn.cursor()

    cur.execute("SELECT telegram_id FROM users WHERE subscribed_to_events = true")
    user_ids = [row[0] for row in cur.fetchall()]

    for user_id in user_ids:
        try:
            await bot.send_message(chat_id=user_id, text=message_text)
            cur.execute("INSERT INTO logs (telegram_id, event_type) VALUES (%s, %s)", (user_id, 'event_message'))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            cur.execute("INSERT INTO logs (telegram_id, event_type, message) VALUES (%s, %s, %s)", (user_id, 'send_error', str(e)))

    conn.commit()
    cur.close()
    conn.close()


if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add_event", add_event_command))
    app.add_handler(CommandHandler("events", events_command))
    app.add_handler(CommandHandler("birthday", birthday_command))
    app.add_handler(CommandHandler("notify", notify_command))
    app.add_handler(MessageHandler(
        filters.TEXT & filters.Chat(chat_id=GROUP_CHAT_ID),
        forward_from_thread
    ))
    app.run_polling()
