from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from db import add_event, get_events, update_birthday, update_notify_status, create_or_get_user
from utils.logger import log_user_action

import os
import datetime

from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    username = user.username or ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    create_or_get_user(update.effective_user)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, "/start")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ö–ë–ú –ë–æ—Ç. –í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/add_event <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
                                    "/events ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                                    "/birthday <–¥–¥.–º–º.–≥–≥–≥–≥> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                                    "/notify on|off ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def add_event_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in [552167621]:  #
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return

    text = ' '.join(context.args)
    if not text:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_event <—Ç–µ–∫—Å—Ç>")
        return

    add_event(text)
    await update.message.reply_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

async def events_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events = get_events()
    if not events:
        await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
    else:
        await update.message.reply_text("\n\n".join(events))

import datetime  # –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å

async def birthday_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /birthday –¥–¥.–º–º.–≥–≥–≥–≥")
        return

    input_date = context.args[0]
    try:
        date_obj = datetime.datetime.strptime(input_date, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –¥–¥.–º–º.–≥–≥–≥–≥")
        return

    user_id = update.effective_user.id
    update_birthday(user_id, date_obj)
    await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {input_date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or context.args[0].lower() not in ["on", "off"]:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /notify on –∏–ª–∏ /notify off")
        return

    value = context.args[0].lower() == "on"
    user_id = update.effective_user.id
    update_notify_status(user_id, value)
    await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã." if value else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add_event", add_event_command))
    app.add_handler(CommandHandler("events", events_command))
    app.add_handler(CommandHandler("birthday", birthday_command))
    app.add_handler(CommandHandler("notify", notify_command))
    app.run_polling()
